[["starting-to-set-up-your-new-workshop.html", "3 Starting to Set Up Your New Workshop 3.1 Workshop Setup (RC) 3.2 Setting Up Team Access (Nia will fill this in) 3.3 Getting the Template on Your Local Computer - Git Clone 3.4 File Setup Explanation", " 3 Starting to Set Up Your New Workshop Certain aspects of the setup for workshops will be different depending on your role. Headers ending in ‚Äú(RC)‚Äù are for Regional Coordinators. Headers without ‚Äú(RC)‚Äù are assumed to be relevant to both RC and workshop teams. 3.1 Workshop Setup (RC) Regional Coordinators will be tasked with creating and slightly editing each new repository for each new workshop. First, let‚Äôs go the bookdown template. Click on the ‚ÄúUse this template‚Äù green button, which is to the left of the title of the repository ‚Äúbookdown-template‚Äù. Then, press the dropdown option: ‚ÄúCreate a new repository‚Äù, as seen below. You will be brought to a ‚ÄúCreate a new repository‚Äù page. Fill out the blanks as seen below. That is, change the owner to XXX, make it public, fill in the repository name and description according to CBW Guidelines. ‚ÄúInclude all branches‚Äù does not need to be selected (???). NOTE: CHANGE OWNER TO XXX (ask Nia, probably cbw-dev for now) This may take a couple seconds to generate. After it loads, you will be brought to a new repository for the new workshop! Now, let‚Äôs turn this into a website - let‚Äôs deploy! 3.1.1 How to Deploy Your Workshop Website In the top navigation bar, select settings. Then, go to the pages sidebar. ‚ÄúDeploy from a branch‚Äù is already selected, which is what we want. We must change the branch from ‚Äúnone‚Äù to main. Then, change the folder from / root to /docs. Then press save. Great! Now we‚Äôre waiting on the page to build and deploy, which should take less than a minute. To see updates, go to the Actions page (found along the top navigation bar. This will help you understand how the deploy is working, and if it succeeded or failed. You can click pages build and deployment for updates. It will give you errors (which may not be very clear) or the link of your deployed page! 3.2 Setting Up Team Access (Nia will fill this in) 3.3 Getting the Template on Your Local Computer - Git Clone navigate to where in your local file system you want to have your workshop in (hint: cd) git clone git@github.com:jq-11/workshop-name.git ready to go ! you should have permissions to git push NOTE: Consider having only one team member (or perhaps your RC) make git pushes or control pull requests. To avoid merge conflicts, designate 1 team member to control actual changes to your workshop repo. Other team members can fork or create branches, and create a pull request that the designated team member can check and overlook. But what do any of these files mean? Which ones do I edit? Which ones shouldn‚Äôt I edit? How do I open this in RStudio? It‚Äôs time for you to go to the next page :D 3.4 File Setup Explanation Explain file setup (tree diagram?) "],["build-site.html", "7 Build Site 7.1 How to edit _bookdown.yml 7.2 How to edit _output.yml (RC) 7.3 Mandatory ‚Äúindex.Rmd‚Äù landing page 7.4 Build the book:", " 7 Build Site 7.1 How to edit _bookdown.yml add a new line, output_dir: \"docs\" to _bookdown.yml build the site add a .nojekyll file into the produced docs folder 7.2 How to edit _output.yml (RC) after before: change your workshop name link after edit: put the link to the workshop repo, and end the link with /%s save 7.3 Mandatory ‚Äúindex.Rmd‚Äù landing page Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 7.4 Build the book: ‚ÄúBuild‚Äù button in RStudio IDE /OR/ bookdown::render_book() Preview the book: - updates on saves in viewer window bookdown::serve_book() Before building 7.4.1 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select ‚ÄúAll formats‚Äù if you‚Äôd like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, you‚Äôll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 7.4.2 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in ‚ÄúPreview book‚Äù, or from the R console: bookdown::serve_book() "],["git-instructions.html", "8 Git Instructions 8.1 How to Make a Git Repo (RC) 8.2 Updating GitHub via RStudio 8.3 How to Git Clone (ISC)", " 8 Git Instructions 8.1 How to Make a Git Repo (RC) Go to https://github.com/cbw-dev (CHANGE?) and scroll to your repositories. Click the green ‚ÄúNew‚Äù button to the right of the repositories search bar. Create the new repository. Give it a name and description. Select Public instead of private, as shown below. üöß Warning MAKE NAMING CONVENTION 4. Click the green Create repository button at the bottom. Now, we already have a local project. Now we want it on GitHub, so everyone on your team can make changes to the workshop! Let‚Äôs make the GitHub connection (i.e let‚Äôs add our local code to GitHub!) 8.1.1 How to Make the Git Connection (Adding your Local Repo to GitHub) After the previous step, you will be brought to this page.The only things that will differ are the name of the repo. landing page after making a git repo Open Terminal (Mac) or Command Prompt/Powershell (Windows). Go to where we created the bookdown project. Once inside the folder with the project. Let‚Äôs make the git repo. First we initialize: git init. (Put this into terminal and press enter.) Let‚Äôs add all the files: git add * Let‚Äôs commit these files, with a descriptive message to help make it clear to others what we just did. For now, our message can be simple: git commit -m \"first commit\". (Put this into terminal and press enter.) Next, put this into terminal and press enter: git branch -M main. Important: This step is why I highlighted that specific text above. Copy that command, and put it into terminal. Generally, it will look something like this: git remote add origin git@github.com:cbw-dev/NAME-OF-YOUR-REPO.git Next, put git push -u origin main into terminal and press enter. All the steps are shown below. all the git steps typed out into terminal with results 8.2 Updating GitHub via RStudio Now, close your RStudio session, and reopen it. Now, we will be able to see a Git window in the top right. Click ‚ÄúGit‚Äù to open this window. RStudio with Git window open Let‚Äôs say we only edited index.Rmd, now we see the newly edited files. (Do not worry too much about .DS_Store and .gitignore do.) Let‚Äôs try to push this change to GitHub. Select all the edited files. selected files in the git window and the commit button highlighted Then, click the Commit button, which appears above your selected items. A window pane will appear (shown below). git commit window pane Add a commit message in the corresponding box, and then press commit below it. A new window will show up, detailing your updates. Close this window and then press Push to push your updates to GitHub. post git commit window Now, we‚Äôre done! We should see the updates on GitHub now. Also note, if we ever want to pull updates from GitHub, there is also a Pull button in the Git window within RStudio! 8.3 How to Git Clone (ISC) "],["how-to-deploy-your-workshop-website-1.html", "9 How to Deploy Your Workshop Website", " 9 How to Deploy Your Workshop Website Let‚Äôs recap. We‚Äôve made a bookdown project that builds into a website. We‚Äôve reconfigured the output to go to a folder called ‚Äúdocs‚Äù (output_dir: ‚Äúdocs‚Äù). We‚Äôve pushed our content onto github, and also made a ‚Äú.nojekyll‚Äù file, which we placed into docs. Now in our ./docs folder, we have a bunch of html files that make up our website. We want GitHub to look at these files in the docs folder and host the website for us! We deploy our website using GitHub pages. GitHub pages uses jekyll, so the .nojekyll file tells it to no longer rely on jekyll. Now, all we need to do is tell GitHub pages to deploy (create/update the website) from our docs folder. Go to your repo on GitHub. In the top navigation bar, select settings. Then, go to the pages sidebar. ‚ÄúDeploy from a branch‚Äù is already selected, which is what we want. We must change the branch from ‚Äúnone‚Äù to main. Then, change the folder from / root to /docs. Then press save. Great! Now we‚Äôre waiting on the page to build and deploy, which should take less than a minute. To see updates, go to the Actions page (found along the top navigation bar. This will help you understand how the deploy is working, and if it succeeded or failed. Image showing the different possibilities of deploy a github page You can click pages build and deployment for updates. It will give you errors (which may not be very clear) or the link of your deployed page! Click around to explore more! "],["404.html", "Error 404: This page does not exist.", " Error 404: This page does not exist. This page does not exist anymore! Try going back to the workshop homepage or the bioinformatics.ca homepage. "]]
